//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./prismtoken_types');
//HELPER FUNCTIONS AND STRUCTURES

var TokenApi_signInWithPassword_args = function(args) {
  this.messageId = null;
  this.domain = null;
  this.username = null;
  this.password = null;
  this.sessionOpts = null;
  if (args) {
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    }
    if (args.domain !== undefined && args.domain !== null) {
      this.domain = args.domain;
    }
    if (args.username !== undefined && args.username !== null) {
      this.username = args.username;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
    if (args.sessionOpts !== undefined && args.sessionOpts !== null) {
      this.sessionOpts = new ttypes.SessionOptions(args.sessionOpts);
    }
  }
};
TokenApi_signInWithPassword_args.prototype = {};
TokenApi_signInWithPassword_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.domain = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionOpts = new ttypes.SessionOptions();
        this.sessionOpts.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenApi_signInWithPassword_args.prototype.write = function(output) {
  output.writeStructBegin('TokenApi_signInWithPassword_args');
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 1);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  if (this.domain !== null && this.domain !== undefined) {
    output.writeFieldBegin('domain', Thrift.Type.STRING, 2);
    output.writeString(this.domain);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 3);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 4);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.sessionOpts !== null && this.sessionOpts !== undefined) {
    output.writeFieldBegin('sessionOpts', Thrift.Type.STRUCT, 5);
    this.sessionOpts.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenApi_signInWithPassword_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.SignInResponse(args.success);
    }
  }
};
TokenApi_signInWithPassword_result.prototype = {};
TokenApi_signInWithPassword_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SignInResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenApi_signInWithPassword_result.prototype.write = function(output) {
  output.writeStructBegin('TokenApi_signInWithPassword_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenApi_issueCreditToken_args = function(args) {
  this.messageId = null;
  this.accessToken = null;
  this.meterConfig = null;
  this.subclass = null;
  this.transferAmount = null;
  this.tokenTime = null;
  this.flags = null;
  if (args) {
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    }
    if (args.accessToken !== undefined && args.accessToken !== null) {
      this.accessToken = args.accessToken;
    }
    if (args.meterConfig !== undefined && args.meterConfig !== null) {
      this.meterConfig = new ttypes.MeterConfigIn(args.meterConfig);
    }
    if (args.subclass !== undefined && args.subclass !== null) {
      this.subclass = args.subclass;
    }
    if (args.transferAmount !== undefined && args.transferAmount !== null) {
      this.transferAmount = args.transferAmount;
    }
    if (args.tokenTime !== undefined && args.tokenTime !== null) {
      this.tokenTime = args.tokenTime;
    }
    if (args.flags !== undefined && args.flags !== null) {
      this.flags = args.flags;
    }
  }
};
TokenApi_issueCreditToken_args.prototype = {};
TokenApi_issueCreditToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.accessToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.meterConfig = new ttypes.MeterConfigIn();
        this.meterConfig.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I16) {
        this.subclass = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.transferAmount = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.tokenTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.flags = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenApi_issueCreditToken_args.prototype.write = function(output) {
  output.writeStructBegin('TokenApi_issueCreditToken_args');
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 1);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  if (this.accessToken !== null && this.accessToken !== undefined) {
    output.writeFieldBegin('accessToken', Thrift.Type.STRING, 2);
    output.writeString(this.accessToken);
    output.writeFieldEnd();
  }
  if (this.meterConfig !== null && this.meterConfig !== undefined) {
    output.writeFieldBegin('meterConfig', Thrift.Type.STRUCT, 3);
    this.meterConfig.write(output);
    output.writeFieldEnd();
  }
  if (this.subclass !== null && this.subclass !== undefined) {
    output.writeFieldBegin('subclass', Thrift.Type.I16, 4);
    output.writeI16(this.subclass);
    output.writeFieldEnd();
  }
  if (this.transferAmount !== null && this.transferAmount !== undefined) {
    output.writeFieldBegin('transferAmount', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.transferAmount);
    output.writeFieldEnd();
  }
  if (this.tokenTime !== null && this.tokenTime !== undefined) {
    output.writeFieldBegin('tokenTime', Thrift.Type.I64, 6);
    output.writeI64(this.tokenTime);
    output.writeFieldEnd();
  }
  if (this.flags !== null && this.flags !== undefined) {
    output.writeFieldBegin('flags', Thrift.Type.I64, 7);
    output.writeI64(this.flags);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenApi_issueCreditToken_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.ApiException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Token]);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
TokenApi_issueCreditToken_result.prototype = {};
TokenApi_issueCreditToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = new ttypes.Token();
          elem3.read(input);
          this.success.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.ApiException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenApi_issueCreditToken_result.prototype.write = function(output) {
  output.writeStructBegin('TokenApi_issueCreditToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter4 in this.success) {
      if (this.success.hasOwnProperty(iter4)) {
        iter4 = this.success[iter4];
        iter4.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenApi_issueMseToken_args = function(args) {
  this.messageId = null;
  this.accessToken = null;
  this.meterConfig = null;
  this.subclass = null;
  this.transferAmount = null;
  this.tokenTime = null;
  this.flags = null;
  if (args) {
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    }
    if (args.accessToken !== undefined && args.accessToken !== null) {
      this.accessToken = args.accessToken;
    }
    if (args.meterConfig !== undefined && args.meterConfig !== null) {
      this.meterConfig = new ttypes.MeterConfigIn(args.meterConfig);
    }
    if (args.subclass !== undefined && args.subclass !== null) {
      this.subclass = args.subclass;
    }
    if (args.transferAmount !== undefined && args.transferAmount !== null) {
      this.transferAmount = args.transferAmount;
    }
    if (args.tokenTime !== undefined && args.tokenTime !== null) {
      this.tokenTime = args.tokenTime;
    }
    if (args.flags !== undefined && args.flags !== null) {
      this.flags = args.flags;
    }
  }
};
TokenApi_issueMseToken_args.prototype = {};
TokenApi_issueMseToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.accessToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.meterConfig = new ttypes.MeterConfigIn();
        this.meterConfig.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I16) {
        this.subclass = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.transferAmount = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.tokenTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.flags = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenApi_issueMseToken_args.prototype.write = function(output) {
  output.writeStructBegin('TokenApi_issueMseToken_args');
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 1);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  if (this.accessToken !== null && this.accessToken !== undefined) {
    output.writeFieldBegin('accessToken', Thrift.Type.STRING, 2);
    output.writeString(this.accessToken);
    output.writeFieldEnd();
  }
  if (this.meterConfig !== null && this.meterConfig !== undefined) {
    output.writeFieldBegin('meterConfig', Thrift.Type.STRUCT, 3);
    this.meterConfig.write(output);
    output.writeFieldEnd();
  }
  if (this.subclass !== null && this.subclass !== undefined) {
    output.writeFieldBegin('subclass', Thrift.Type.I16, 4);
    output.writeI16(this.subclass);
    output.writeFieldEnd();
  }
  if (this.transferAmount !== null && this.transferAmount !== undefined) {
    output.writeFieldBegin('transferAmount', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.transferAmount);
    output.writeFieldEnd();
  }
  if (this.tokenTime !== null && this.tokenTime !== undefined) {
    output.writeFieldBegin('tokenTime', Thrift.Type.I64, 6);
    output.writeI64(this.tokenTime);
    output.writeFieldEnd();
  }
  if (this.flags !== null && this.flags !== undefined) {
    output.writeFieldBegin('flags', Thrift.Type.I64, 7);
    output.writeI64(this.flags);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenApi_issueMseToken_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.ApiException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Token]);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
TokenApi_issueMseToken_result.prototype = {};
TokenApi_issueMseToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp36 = input.readListBegin();
        var _size5 = _rtmp36.size || 0;
        for (var _i7 = 0; _i7 < _size5; ++_i7) {
          var elem8 = null;
          elem8 = new ttypes.Token();
          elem8.read(input);
          this.success.push(elem8);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.ApiException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenApi_issueMseToken_result.prototype.write = function(output) {
  output.writeStructBegin('TokenApi_issueMseToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter9 in this.success) {
      if (this.success.hasOwnProperty(iter9)) {
        iter9 = this.success[iter9];
        iter9.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenApi_issueKeyChangeTokens_args = function(args) {
  this.messageId = null;
  this.accessToken = null;
  this.meterConfig = null;
  this.newConfig = null;
  if (args) {
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    }
    if (args.accessToken !== undefined && args.accessToken !== null) {
      this.accessToken = args.accessToken;
    }
    if (args.meterConfig !== undefined && args.meterConfig !== null) {
      this.meterConfig = new ttypes.MeterConfigIn(args.meterConfig);
    }
    if (args.newConfig !== undefined && args.newConfig !== null) {
      this.newConfig = new ttypes.MeterConfigAmendment(args.newConfig);
    }
  }
};
TokenApi_issueKeyChangeTokens_args.prototype = {};
TokenApi_issueKeyChangeTokens_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.accessToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.meterConfig = new ttypes.MeterConfigIn();
        this.meterConfig.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.newConfig = new ttypes.MeterConfigAmendment();
        this.newConfig.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenApi_issueKeyChangeTokens_args.prototype.write = function(output) {
  output.writeStructBegin('TokenApi_issueKeyChangeTokens_args');
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 1);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  if (this.accessToken !== null && this.accessToken !== undefined) {
    output.writeFieldBegin('accessToken', Thrift.Type.STRING, 2);
    output.writeString(this.accessToken);
    output.writeFieldEnd();
  }
  if (this.meterConfig !== null && this.meterConfig !== undefined) {
    output.writeFieldBegin('meterConfig', Thrift.Type.STRUCT, 3);
    this.meterConfig.write(output);
    output.writeFieldEnd();
  }
  if (this.newConfig !== null && this.newConfig !== undefined) {
    output.writeFieldBegin('newConfig', Thrift.Type.STRUCT, 4);
    this.newConfig.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenApi_issueKeyChangeTokens_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.ApiException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Token]);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
TokenApi_issueKeyChangeTokens_result.prototype = {};
TokenApi_issueKeyChangeTokens_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp311 = input.readListBegin();
        var _size10 = _rtmp311.size || 0;
        for (var _i12 = 0; _i12 < _size10; ++_i12) {
          var elem13 = null;
          elem13 = new ttypes.Token();
          elem13.read(input);
          this.success.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.ApiException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenApi_issueKeyChangeTokens_result.prototype.write = function(output) {
  output.writeStructBegin('TokenApi_issueKeyChangeTokens_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter14 in this.success) {
      if (this.success.hasOwnProperty(iter14)) {
        iter14 = this.success[iter14];
        iter14.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenApiClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
TokenApiClient.prototype = {};
TokenApiClient.prototype.seqid = function() { return this._seqid; };
TokenApiClient.prototype.new_seqid = function() { return this._seqid += 1; };

TokenApiClient.prototype.signInWithPassword = function(messageId, domain, username, password, sessionOpts, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_signInWithPassword(messageId, domain, username, password, sessionOpts);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_signInWithPassword(messageId, domain, username, password, sessionOpts);
  }
};

TokenApiClient.prototype.send_signInWithPassword = function(messageId, domain, username, password, sessionOpts) {
  var output = new this.pClass(this.output);
  var params = {
    messageId: messageId,
    domain: domain,
    username: username,
    password: password,
    sessionOpts: sessionOpts
  };
  var args = new TokenApi_signInWithPassword_args(params);
  try {
    output.writeMessageBegin('signInWithPassword', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

TokenApiClient.prototype.recv_signInWithPassword = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TokenApi_signInWithPassword_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('signInWithPassword failed: unknown result');
};

TokenApiClient.prototype.issueCreditToken = function(messageId, accessToken, meterConfig, subclass, transferAmount, tokenTime, flags, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_issueCreditToken(messageId, accessToken, meterConfig, subclass, transferAmount, tokenTime, flags);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_issueCreditToken(messageId, accessToken, meterConfig, subclass, transferAmount, tokenTime, flags);
  }
};

TokenApiClient.prototype.send_issueCreditToken = function(messageId, accessToken, meterConfig, subclass, transferAmount, tokenTime, flags) {
  var output = new this.pClass(this.output);
  var params = {
    messageId: messageId,
    accessToken: accessToken,
    meterConfig: meterConfig,
    subclass: subclass,
    transferAmount: transferAmount,
    tokenTime: tokenTime,
    flags: flags
  };
  var args = new TokenApi_issueCreditToken_args(params);
  try {
    output.writeMessageBegin('issueCreditToken', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

TokenApiClient.prototype.recv_issueCreditToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TokenApi_issueCreditToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('issueCreditToken failed: unknown result');
};

TokenApiClient.prototype.issueMseToken = function(messageId, accessToken, meterConfig, subclass, transferAmount, tokenTime, flags, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_issueMseToken(messageId, accessToken, meterConfig, subclass, transferAmount, tokenTime, flags);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_issueMseToken(messageId, accessToken, meterConfig, subclass, transferAmount, tokenTime, flags);
  }
};

TokenApiClient.prototype.send_issueMseToken = function(messageId, accessToken, meterConfig, subclass, transferAmount, tokenTime, flags) {
  var output = new this.pClass(this.output);
  var params = {
    messageId: messageId,
    accessToken: accessToken,
    meterConfig: meterConfig,
    subclass: subclass,
    transferAmount: transferAmount,
    tokenTime: tokenTime,
    flags: flags
  };
  var args = new TokenApi_issueMseToken_args(params);
  try {
    output.writeMessageBegin('issueMseToken', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

TokenApiClient.prototype.recv_issueMseToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TokenApi_issueMseToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('issueMseToken failed: unknown result');
};

TokenApiClient.prototype.issueKeyChangeTokens = function(messageId, accessToken, meterConfig, newConfig, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_issueKeyChangeTokens(messageId, accessToken, meterConfig, newConfig);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_issueKeyChangeTokens(messageId, accessToken, meterConfig, newConfig);
  }
};

TokenApiClient.prototype.send_issueKeyChangeTokens = function(messageId, accessToken, meterConfig, newConfig) {
  var output = new this.pClass(this.output);
  var params = {
    messageId: messageId,
    accessToken: accessToken,
    meterConfig: meterConfig,
    newConfig: newConfig
  };
  var args = new TokenApi_issueKeyChangeTokens_args(params);
  try {
    output.writeMessageBegin('issueKeyChangeTokens', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

TokenApiClient.prototype.recv_issueKeyChangeTokens = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TokenApi_issueKeyChangeTokens_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('issueKeyChangeTokens failed: unknown result');
};
var TokenApiProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
TokenApiProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
TokenApiProcessor.prototype.process_signInWithPassword = function(seqid, input, output) {
  var args = new TokenApi_signInWithPassword_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.signInWithPassword.length === 5) {
    Q.fcall(this._handler.signInWithPassword.bind(this._handler),
      args.messageId,
      args.domain,
      args.username,
      args.password,
      args.sessionOpts
    ).then(function(result) {
      var result_obj = new TokenApi_signInWithPassword_result({success: result});
      output.writeMessageBegin("signInWithPassword", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("signInWithPassword", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.signInWithPassword(args.messageId, args.domain, args.username, args.password, args.sessionOpts, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new TokenApi_signInWithPassword_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("signInWithPassword", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("signInWithPassword", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TokenApiProcessor.prototype.process_issueCreditToken = function(seqid, input, output) {
  var args = new TokenApi_issueCreditToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.issueCreditToken.length === 7) {
    Q.fcall(this._handler.issueCreditToken.bind(this._handler),
      args.messageId,
      args.accessToken,
      args.meterConfig,
      args.subclass,
      args.transferAmount,
      args.tokenTime,
      args.flags
    ).then(function(result) {
      var result_obj = new TokenApi_issueCreditToken_result({success: result});
      output.writeMessageBegin("issueCreditToken", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ApiException) {
        result = new TokenApi_issueCreditToken_result(err);
        output.writeMessageBegin("issueCreditToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("issueCreditToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.issueCreditToken(args.messageId, args.accessToken, args.meterConfig, args.subclass, args.transferAmount, args.tokenTime, args.flags, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ApiException) {
        result_obj = new TokenApi_issueCreditToken_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("issueCreditToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("issueCreditToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TokenApiProcessor.prototype.process_issueMseToken = function(seqid, input, output) {
  var args = new TokenApi_issueMseToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.issueMseToken.length === 7) {
    Q.fcall(this._handler.issueMseToken.bind(this._handler),
      args.messageId,
      args.accessToken,
      args.meterConfig,
      args.subclass,
      args.transferAmount,
      args.tokenTime,
      args.flags
    ).then(function(result) {
      var result_obj = new TokenApi_issueMseToken_result({success: result});
      output.writeMessageBegin("issueMseToken", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ApiException) {
        result = new TokenApi_issueMseToken_result(err);
        output.writeMessageBegin("issueMseToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("issueMseToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.issueMseToken(args.messageId, args.accessToken, args.meterConfig, args.subclass, args.transferAmount, args.tokenTime, args.flags, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ApiException) {
        result_obj = new TokenApi_issueMseToken_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("issueMseToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("issueMseToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TokenApiProcessor.prototype.process_issueKeyChangeTokens = function(seqid, input, output) {
  var args = new TokenApi_issueKeyChangeTokens_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.issueKeyChangeTokens.length === 4) {
    Q.fcall(this._handler.issueKeyChangeTokens.bind(this._handler),
      args.messageId,
      args.accessToken,
      args.meterConfig,
      args.newConfig
    ).then(function(result) {
      var result_obj = new TokenApi_issueKeyChangeTokens_result({success: result});
      output.writeMessageBegin("issueKeyChangeTokens", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ApiException) {
        result = new TokenApi_issueKeyChangeTokens_result(err);
        output.writeMessageBegin("issueKeyChangeTokens", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("issueKeyChangeTokens", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.issueKeyChangeTokens(args.messageId, args.accessToken, args.meterConfig, args.newConfig, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ApiException) {
        result_obj = new TokenApi_issueKeyChangeTokens_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("issueKeyChangeTokens", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("issueKeyChangeTokens", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
