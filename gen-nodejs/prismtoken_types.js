//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
var SessionOptions = module.exports.SessionOptions = function(args) {
  this.version = null;
  if (args) {
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
  }
};
SessionOptions.prototype = {};
SessionOptions.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SessionOptions.prototype.write = function(output) {
  output.writeStructBegin('SessionOptions');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 1);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SignInResponse = module.exports.SignInResponse = function(args) {
  this.token = null;
  this.expiry = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.expiry !== undefined && args.expiry !== null) {
      this.expiry = args.expiry;
    }
  }
};
SignInResponse.prototype = {};
SignInResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.expiry = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SignInResponse.prototype.write = function(output) {
  output.writeStructBegin('SignInResponse');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.expiry !== null && this.expiry !== undefined) {
    output.writeFieldBegin('expiry', Thrift.Type.I64, 2);
    output.writeI64(this.expiry);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MeterConfigIn = module.exports.MeterConfigIn = function(args) {
  this.drn = null;
  this.ea = null;
  this.tct = null;
  this.Sgc = null;
  this.Krn = null;
  this.Ti = null;
  this.ken = null;
  if (args) {
    if (args.drn !== undefined && args.drn !== null) {
      this.drn = args.drn;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field drn is unset!');
    }
    if (args.ea !== undefined && args.ea !== null) {
      this.ea = args.ea;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ea is unset!');
    }
    if (args.tct !== undefined && args.tct !== null) {
      this.tct = args.tct;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tct is unset!');
    }
    if (args.Sgc !== undefined && args.Sgc !== null) {
      this.Sgc = args.Sgc;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field Sgc is unset!');
    }
    if (args.Krn !== undefined && args.Krn !== null) {
      this.Krn = args.Krn;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field Krn is unset!');
    }
    if (args.Ti !== undefined && args.Ti !== null) {
      this.Ti = args.Ti;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field Ti is unset!');
    }
    if (args.ken !== undefined && args.ken !== null) {
      this.ken = args.ken;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ken is unset!');
    }
  }
};
MeterConfigIn.prototype = {};
MeterConfigIn.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.drn = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.ea = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.tct = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.Sgc = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I16) {
        this.Krn = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I16) {
        this.Ti = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.I16) {
        this.ken = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MeterConfigIn.prototype.write = function(output) {
  output.writeStructBegin('MeterConfigIn');
  if (this.drn !== null && this.drn !== undefined) {
    output.writeFieldBegin('drn', Thrift.Type.STRING, 1);
    output.writeString(this.drn);
    output.writeFieldEnd();
  }
  if (this.ea !== null && this.ea !== undefined) {
    output.writeFieldBegin('ea', Thrift.Type.I16, 2);
    output.writeI16(this.ea);
    output.writeFieldEnd();
  }
  if (this.tct !== null && this.tct !== undefined) {
    output.writeFieldBegin('tct', Thrift.Type.I16, 3);
    output.writeI16(this.tct);
    output.writeFieldEnd();
  }
  if (this.Sgc !== null && this.Sgc !== undefined) {
    output.writeFieldBegin('Sgc', Thrift.Type.I32, 10);
    output.writeI32(this.Sgc);
    output.writeFieldEnd();
  }
  if (this.Krn !== null && this.Krn !== undefined) {
    output.writeFieldBegin('Krn', Thrift.Type.I16, 11);
    output.writeI16(this.Krn);
    output.writeFieldEnd();
  }
  if (this.Ti !== null && this.Ti !== undefined) {
    output.writeFieldBegin('Ti', Thrift.Type.I16, 12);
    output.writeI16(this.Ti);
    output.writeFieldEnd();
  }
  if (this.ken !== null && this.ken !== undefined) {
    output.writeFieldBegin('ken', Thrift.Type.I16, 30);
    output.writeI16(this.ken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MeterConfigAmendment = module.exports.MeterConfigAmendment = function(args) {
  this.toSgc = null;
  this.toKrn = null;
  this.toTi = null;
  if (args) {
    if (args.toSgc !== undefined && args.toSgc !== null) {
      this.toSgc = args.toSgc;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field toSgc is unset!');
    }
    if (args.toKrn !== undefined && args.toKrn !== null) {
      this.toKrn = args.toKrn;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field toKrn is unset!');
    }
    if (args.toTi !== undefined && args.toTi !== null) {
      this.toTi = args.toTi;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field toTi is unset!');
    }
  }
};
MeterConfigAmendment.prototype = {};
MeterConfigAmendment.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.toSgc = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.toKrn = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.toTi = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MeterConfigAmendment.prototype.write = function(output) {
  output.writeStructBegin('MeterConfigAmendment');
  if (this.toSgc !== null && this.toSgc !== undefined) {
    output.writeFieldBegin('toSgc', Thrift.Type.I32, 1);
    output.writeI32(this.toSgc);
    output.writeFieldEnd();
  }
  if (this.toKrn !== null && this.toKrn !== undefined) {
    output.writeFieldBegin('toKrn', Thrift.Type.I16, 2);
    output.writeI16(this.toKrn);
    output.writeFieldEnd();
  }
  if (this.toTi !== null && this.toTi !== undefined) {
    output.writeFieldBegin('toTi', Thrift.Type.I16, 3);
    output.writeI16(this.toTi);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ApiException = module.exports.ApiException = function(args) {
  Thrift.TException.call(this, "ApiException");
  this.name = "ApiException";
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(ApiException, Thrift.TException);
ApiException.prototype.name = 'ApiException';
ApiException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ApiException.prototype.write = function(output) {
  output.writeStructBegin('ApiException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Token = module.exports.Token = function(args) {
  this.drn = null;
  this.pan = null;
  this.ea = null;
  this.tct = null;
  this.sgc = null;
  this.krn = null;
  this.ti = null;
  this.tokenClass = null;
  this.subclass = null;
  this.tid = null;
  this.transferAmount = null;
  this.isReservedTid = null;
  this.description = null;
  this.stsUnitName = null;
  this.scaledAmount = null;
  this.scaledUnitName = null;
  this.tokenDec = null;
  this.tokenHex = null;
  this.idSm = null;
  if (args) {
    if (args.drn !== undefined && args.drn !== null) {
      this.drn = args.drn;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field drn is unset!');
    }
    if (args.pan !== undefined && args.pan !== null) {
      this.pan = args.pan;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field pan is unset!');
    }
    if (args.ea !== undefined && args.ea !== null) {
      this.ea = args.ea;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ea is unset!');
    }
    if (args.tct !== undefined && args.tct !== null) {
      this.tct = args.tct;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tct is unset!');
    }
    if (args.sgc !== undefined && args.sgc !== null) {
      this.sgc = args.sgc;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sgc is unset!');
    }
    if (args.krn !== undefined && args.krn !== null) {
      this.krn = args.krn;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field krn is unset!');
    }
    if (args.ti !== undefined && args.ti !== null) {
      this.ti = args.ti;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ti is unset!');
    }
    if (args.tokenClass !== undefined && args.tokenClass !== null) {
      this.tokenClass = args.tokenClass;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tokenClass is unset!');
    }
    if (args.subclass !== undefined && args.subclass !== null) {
      this.subclass = args.subclass;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field subclass is unset!');
    }
    if (args.tid !== undefined && args.tid !== null) {
      this.tid = args.tid;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tid is unset!');
    }
    if (args.transferAmount !== undefined && args.transferAmount !== null) {
      this.transferAmount = args.transferAmount;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field transferAmount is unset!');
    }
    if (args.isReservedTid !== undefined && args.isReservedTid !== null) {
      this.isReservedTid = args.isReservedTid;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field isReservedTid is unset!');
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field description is unset!');
    }
    if (args.stsUnitName !== undefined && args.stsUnitName !== null) {
      this.stsUnitName = args.stsUnitName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field stsUnitName is unset!');
    }
    if (args.scaledAmount !== undefined && args.scaledAmount !== null) {
      this.scaledAmount = args.scaledAmount;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field scaledAmount is unset!');
    }
    if (args.scaledUnitName !== undefined && args.scaledUnitName !== null) {
      this.scaledUnitName = args.scaledUnitName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field scaledUnitName is unset!');
    }
    if (args.tokenDec !== undefined && args.tokenDec !== null) {
      this.tokenDec = args.tokenDec;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tokenDec is unset!');
    }
    if (args.tokenHex !== undefined && args.tokenHex !== null) {
      this.tokenHex = args.tokenHex;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tokenHex is unset!');
    }
    if (args.idSm !== undefined && args.idSm !== null) {
      this.idSm = args.idSm;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field idSm is unset!');
    }
  }
};
Token.prototype = {};
Token.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.drn = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.pan = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.ea = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I16) {
        this.tct = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.sgc = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I16) {
        this.krn = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I16) {
        this.ti = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I16) {
        this.tokenClass = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I16) {
        this.subclass = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.tid = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.DOUBLE) {
        this.transferAmount = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.isReservedTid = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.stsUnitName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.scaledAmount = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRING) {
        this.scaledUnitName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.STRING) {
        this.tokenDec = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.STRING) {
        this.tokenHex = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.STRING) {
        this.idSm = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Token.prototype.write = function(output) {
  output.writeStructBegin('Token');
  if (this.drn !== null && this.drn !== undefined) {
    output.writeFieldBegin('drn', Thrift.Type.STRING, 1);
    output.writeString(this.drn);
    output.writeFieldEnd();
  }
  if (this.pan !== null && this.pan !== undefined) {
    output.writeFieldBegin('pan', Thrift.Type.STRING, 2);
    output.writeString(this.pan);
    output.writeFieldEnd();
  }
  if (this.ea !== null && this.ea !== undefined) {
    output.writeFieldBegin('ea', Thrift.Type.I16, 3);
    output.writeI16(this.ea);
    output.writeFieldEnd();
  }
  if (this.tct !== null && this.tct !== undefined) {
    output.writeFieldBegin('tct', Thrift.Type.I16, 4);
    output.writeI16(this.tct);
    output.writeFieldEnd();
  }
  if (this.sgc !== null && this.sgc !== undefined) {
    output.writeFieldBegin('sgc', Thrift.Type.I32, 5);
    output.writeI32(this.sgc);
    output.writeFieldEnd();
  }
  if (this.krn !== null && this.krn !== undefined) {
    output.writeFieldBegin('krn', Thrift.Type.I16, 6);
    output.writeI16(this.krn);
    output.writeFieldEnd();
  }
  if (this.ti !== null && this.ti !== undefined) {
    output.writeFieldBegin('ti', Thrift.Type.I16, 7);
    output.writeI16(this.ti);
    output.writeFieldEnd();
  }
  if (this.tokenClass !== null && this.tokenClass !== undefined) {
    output.writeFieldBegin('tokenClass', Thrift.Type.I16, 10);
    output.writeI16(this.tokenClass);
    output.writeFieldEnd();
  }
  if (this.subclass !== null && this.subclass !== undefined) {
    output.writeFieldBegin('subclass', Thrift.Type.I16, 11);
    output.writeI16(this.subclass);
    output.writeFieldEnd();
  }
  if (this.tid !== null && this.tid !== undefined) {
    output.writeFieldBegin('tid', Thrift.Type.I32, 12);
    output.writeI32(this.tid);
    output.writeFieldEnd();
  }
  if (this.transferAmount !== null && this.transferAmount !== undefined) {
    output.writeFieldBegin('transferAmount', Thrift.Type.DOUBLE, 13);
    output.writeDouble(this.transferAmount);
    output.writeFieldEnd();
  }
  if (this.isReservedTid !== null && this.isReservedTid !== undefined) {
    output.writeFieldBegin('isReservedTid', Thrift.Type.BOOL, 14);
    output.writeBool(this.isReservedTid);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 20);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.stsUnitName !== null && this.stsUnitName !== undefined) {
    output.writeFieldBegin('stsUnitName', Thrift.Type.STRING, 21);
    output.writeString(this.stsUnitName);
    output.writeFieldEnd();
  }
  if (this.scaledAmount !== null && this.scaledAmount !== undefined) {
    output.writeFieldBegin('scaledAmount', Thrift.Type.STRING, 22);
    output.writeString(this.scaledAmount);
    output.writeFieldEnd();
  }
  if (this.scaledUnitName !== null && this.scaledUnitName !== undefined) {
    output.writeFieldBegin('scaledUnitName', Thrift.Type.STRING, 23);
    output.writeString(this.scaledUnitName);
    output.writeFieldEnd();
  }
  if (this.tokenDec !== null && this.tokenDec !== undefined) {
    output.writeFieldBegin('tokenDec', Thrift.Type.STRING, 30);
    output.writeString(this.tokenDec);
    output.writeFieldEnd();
  }
  if (this.tokenHex !== null && this.tokenHex !== undefined) {
    output.writeFieldBegin('tokenHex', Thrift.Type.STRING, 31);
    output.writeString(this.tokenHex);
    output.writeFieldEnd();
  }
  if (this.idSm !== null && this.idSm !== undefined) {
    output.writeFieldBegin('idSm', Thrift.Type.STRING, 40);
    output.writeString(this.idSm);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

